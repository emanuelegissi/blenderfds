"""BlenderFDS, collection types"""

from functools import total_ordering
from blenderfds.lib.utilities import isiterable

class BFList(list):
    """Enhanced list, you can get an item by its idname: bf_list["example"]
    or a BFList of items by items idnames: bf_list[("example1", "example2")] 
    
    >>> bf_list = BFList((BFListItem("first"), BFListItem("second"), BFListItem("third")))
    >>> bf_list["first"]
    <BFListItem('first')>
    >>> bf_list["error"]
    Traceback (most recent call last):
        ...
    KeyError: 'error'
    >>> bf_list[("first", "third")]
    <BFList([<BFListItem('first')>, <BFListItem('third')>])>
    >>> "first" in bf_list, "error" in bf_list, bf_list.get("second"), bf_list.get("error", "default")
    (True, False, <BFListItem('second')>, 'default')
    >>> for item in bf_list: item
    <BFListItem('first')>
    <BFListItem('second')>
    <BFListItem('third')>
    """

    def __repr__(self):
        return "<{0}({1})>".format(self.__class__.__name__, list(self))

    def __getitem__(self, key):
        # Manage: bf_list["key"], return item
        if isinstance(key, str):
            for value in self:
                if getattr(value, "idname", None) == key: return value
            raise KeyError(key)
        # Manage: bf_list[("key1", "key2")], return tuple of items
        if isinstance(key, tuple) or isinstance(key, list):
            return BFList([self[k] for k in key])
        # Manage the rest (eg bf_list[3]), return item
        return list.__getitem__(self, key)

    def __contains__(self, key):
        # Manage: "key" in bf_list
        if isinstance(key, str): return self.get(key, False) and True
        # Manage the rest (eg item in bf_list)
        return list.__contains__(self, key)

    def get(self, key, default=None):
        # Manage: bf_list.get("key", default=None)
        for value in self:
            if getattr(value, "idname", None) == key: return value
        if default is not None: return default
    
@total_ordering
class BFListItem():
    """Self-appending items of BFList. Unicity checked at init. Alphabetic ordering by idname.
    
    >>> BFListItem("fourth"), BFListItem("fifth"), BFListItem("sixth")
    (<BFListItem('fourth')>, <BFListItem('fifth')>, <BFListItem('sixth')>)
    >>> BFListItem(None)
    Traceback (most recent call last):
        ...
    ValueError: Invalid idname 'None'
    >>> BFListItem("fourth")
    Traceback (most recent call last):
        ...
    ValueError: Duplicated idname 'fourth'
    >>> BFListItem.bf_list["fourth"]
    <BFListItem('fourth')>
    >>> BFListItem.bf_list["fourth"] > BFListItem.bf_list["sixth"], BFListItem.bf_list["sixth"] > BFListItem.bf_list["fourth"]
    (False, True)
    """
    bf_list = BFList() # Don't forget to reinitialize when subclassing

    def __init__(self, idname):
        if not idname or not isinstance(idname, str): raise ValueError("Invalid idname '{}'".format(idname))
        if idname in self.bf_list: raise ValueError("Duplicated idname '{}'".format(idname))
        self.idname = idname
        self.bf_list.append(self)

    def __repr__(self):
        return "<{0}('{1}')>".format(self.__class__.__name__, self.idname)
    
    def __lt__(self, other):
        return self.idname < other.idname

# Doctest as function
def test():
    """Doctest function.
    
    Open a Blender example, open a Python console, type "import blenderfds",
    type "blenderfds.bf_basic_types.test()", check test failures (if any ;-)
    """
    import doctest
    from . import bf_basic_types as module
    return doctest.testmod(module, verbose=False).failed

# Doctest as main
if __name__ == "__main__":
    import doctest
    doctest.testmod()
