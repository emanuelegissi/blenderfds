#summary Blender objects to FDS namelist groups
#labels WorkInProgress

Each Blender `object` is exported as one or more FDS namelist groups sharing the same parameters. The FDS parameters assigned to each `object` are specified in the `object properties panel`. Some of the displayed properties change depending on the associated namelist group.

The user should build the architectural model splitting the elements in homogeneous parts from the thermo-physical point of view: each Blender `object` can only have one set of FDS parameters assigned.

<wiki:toc max_depth="2" />

----

= !WorkInProgress =

= FDS Namelist group parameters =


== `& Name` parameter ==

The first and most important parameter of the `object properties panel` is the namelist group name `& Name`. If BlenderFDS recognizes the type of namelist, the `panel` is adapted accordingly, and shows the relevant parameters.

The same `panel` label is updated to host the verbose description of the namelist.

There is a small bug in the current version of Blender: in same remote cases the label is updated immediately, but bleeding edge Blender versions solve the issue.

== `ID` parameter ==

??? Not all namelist groups, we are working on that.

== `FYI` parameter ==

== `SURF_ID` parameter ==

??? Only if a material is referenced

[http://lh4.ggpht.com/_iTIkwVoSUm0/S9XxU0f7LZI/AAAAAAAAARo/cs-z464nQMg/objpanel_VENT.png]

== `SAWTOOTH` parameter ==

[http://lh5.ggpht.com/_iTIkwVoSUm0/S9XxUhW97wI/AAAAAAAAARg/eK0h5tXIJ38/objpanel_OBST.png]

== `Custom parameters` ==


== `IJK` parameter ==

??? Adapt voxel button

[http://lh6.ggpht.com/_iTIkwVoSUm0/S9XxUYGnmAI/AAAAAAAAARc/MDbsCFdii0w/objpanel_MESH.png]

= Exporting the geometry =

A Blender `object` is transformed into one or more FDS namelist groups depending on the complexity of its geometry and on the user requirements. The exported geometry is set using the `XB`, `XYZ`, and `PB*` (`PBX, PBY, PBZ`) `object` parameters.

== `XB` parameter ==

|| *Blender `object` `XB` set to* || *Exported as* || *Number of FDS namelist groups* ||
|| None || Nothing || None ||
|| Voxels || Voxelized solid || Many ||
|| BBox || Bounding box || Only one ||
|| Faces || Faces, one for each face of the Blender `object` || Number of `object mesh faces` ||
|| Edges || Segments, one for each edge of the Blender `object` || Number of `object mesh edges` ||

=== `XB` set to `None` ===

No `XB` parameter is added to the exported namelist group.

=== `XB` set to `Voxels` ===

The Blender `object` is treated by a voxelization algorithm that approximates its geometry as if it was a [http://www.lego.com Lego building]. The building brick is named _voxel_, and its size is specified by the user in the `scene properties panel` (See [BlenderScenesToFDSCases]).

[http://lh5.ggpht.com/_iTIkwVoSUm0/S9dLEyo67MI/AAAAAAAAASc/yvSFrr20JEI/lego_building.jpg] 

When possible, BlenderFDS joins the voxels together in larger _boxes_ to minimize the number of lines of the FDS input file. The boxes sides are always aligned with the global reference system axis, as required by FDS:

[http://lh6.ggpht.com/_iTIkwVoSUm0/S9dRqlKwESI/AAAAAAAAASo/uu5-xDqgHe8/voxelization.png]

The voxelization algorithm treats only _manifold objects_. This means that the `object mesh` should be water-tight and well-formed so that BlenderFDS can decide which portion of space is solid and which is instead void. If the `object` is not manifold, an error message is displayed and `XB` is set to `BBox`.

There is a specific page that explain how to deal with this problem: [NonManifoldObjects Dealing with non-manifold objects].

The overall shape of the `object` is conserved as much as possible:

[http://lh6.ggpht.com/_iTIkwVoSUm0/S9dgyoPwZrI/AAAAAAAAAS0/Lp5CL2daR5c/voxels_shape.png]

The Blender `object` is exported to many FDS namelist groups sharing the same parameters, and covering the same geometry. For example:

{{{
&OBST ID='Wall', XB=-1.575,-1.375,-1.375,-0.475,-0.025,1.975, SURF_ID='Gypsum wall',
      SAWTOOTH=.False., FYI='Voxelized walls' /
&OBST ID='Wall_1', XB=-1.575,-1.375,-1.375,1.375,1.975,3.025, SURF_ID='Gypsum wall',
      SAWTOOTH=.False., FYI='Voxelized walls' /
&OBST ID='Wall_2', XB=-1.575,-1.375,0.475,1.375,-0.025,1.975, SURF_ID='Gypsum wall',
      SAWTOOTH=.False., FYI='Voxelized walls' /
&OBST ID='Wall_3', XB=-1.575,-0.675,-1.575,-1.525,-0.025,3.025, SURF_ID='Gypsum wall',
      SAWTOOTH=.False., FYI='Voxelized walls' /
&OBST ID='Wall_4', XB=-1.575,0.625,-1.525,-1.475,-0.025,3.025, SURF_ID='Gypsum wall',
      SAWTOOTH=.False., FYI='Voxelized walls' /
...
}}}

=== `XB` set to `BBox` ===

BlenderFDS calculates the bounding box in global coordinates of the `object`. The resulting box coordinates are exported as `XB` parameter of one FDS namelist group.

The overall shape of the `object` is not conserved:

[http://lh6.ggpht.com/_iTIkwVoSUm0/S9dgyfvZf5I/AAAAAAAAASw/mbMTAOg73MU/bbox_shape.png]

The Blender `object` is exported to one only FDS namelist group, for example:

{{{
&OBST ID='Wall', XB=0.123,2.233,0.123,2.233,0.123,2.233, SURF_ID='Gypsum wall',
      FYI='BBox wall' /
}}}

=== `XB` set to `Faces` ===

BlenderFDS calculates the bounding box in global coordinates of the Blender `object` `faces`. Each `face` is then flattened, and its edges straightened. The result is a group of right plane faces with edges parallel to the global axis, as required by FDS.  The resulting coordinates are exported as `XB` parameters of many FDS namelist group, one for each `face`:

[http://lh4.ggpht.com/_iTIkwVoSUm0/S9d7GeTrJwI/AAAAAAAAAS8/gRl3cFbu1fk/face_shape.png]

Of course. it is much more clean and less prone to errors to model "straight" `faces`, acceptable by FDS without transformation.

For example, this `XB` setting can be profitably employed to describe several `VENTs` that share the same parameters: the user creates an `object` made of separate `faces` distributed inside the building, and obtains a series of `VENTs`:

{{{
&VENT ID='Fan', XB=5.000,6.000,0.000,1.000,7.134,7.134, SURF_ID='Supply',
      DEVC_ID='Sd1' /
&VENT ID='Fan_1', XB=5.000,6.000,11.000,12.000,7.134,7.134, SURF_ID='Supply', 
      DEVC_ID='Sd1' /
&VENT ID='Fan_2', XB=5.000,6.000,32.000,33.000,7.134,7.134, SURF_ID='Supply',
      DEVC_ID='Sd1' /
...
}}}

=== `XB` set to `Edges` ===

BlenderFDS calculates the end points global coordinates of the Blender `object` `edges`. The resulting coordinates are exported as `XB` parameters of many FDS namelist group, one for each `edge`.

For example, this `XB` setting can be used to describe a group of beam detectors, sharing the same parameters. The user creates an `object` made of independent `edges` distributed inside the building, and obtains a series of `DEVCs`:

{{{
&DEVC ID='Beam detectors', XB=0.029,-1.271,-1.235,1.307,2.500,2.500,
      QUANTITY='PATH OBSCURATION', SETPOINT=0.33 , FYI='Two detectors' /
&DEVC ID='Beam detectors_1', XB=1.217,-1.271,0.043,1.307,2.500,2.500,
      QUANTITY='PATH OBSCURATION', SETPOINT=0.33 , FYI='Two detectors' /
...
}}}

== `XYZ` parameter ==

|| *Blender `object` `XYZ` set to* || *Exported as* || *Number of FDS namelist groups* ||
|| None || Nothing || None ||
|| Verts || Vertices || Vertices, one for each vertex of the Blender `object` ||
|| Center || Center || Only one ||

=== `XYZ` set to `None` ===

No `XYZ` parameter is added to the exported namelist group.

=== `XYZ` set to `Verts` ===

BlenderFDS calculates the global coordinates of the Blender `object` `vertices`. The resulting coordinates are exported as `XYZ` parameters of many FDS namelist group, one for each `vertex`.

For example, this `XYZ` setting can be used to describe a group of thermocouples, sharing the same parameters:

The user creates an `object` made of independent `vertices` distributed inside the building, and obtains a series like this:

{{{
&DEVC ID='Thermocouple serie', XYZ=-0.000,0.000,0.100, QUANTITY='THERMOCOUPLE' /
&DEVC ID='Thermocouple serie_1', XYZ=-0.000,0.000,0.400, QUANTITY='THERMOCOUPLE' /
&DEVC ID='Thermocouple serie_2', XYZ=-0.000,0.000,0.700, QUANTITY='THERMOCOUPLE' /
&DEVC ID='Thermocouple serie_3', XYZ=-0.000,0.000,1.000, QUANTITY='THERMOCOUPLE' /
&DEVC ID='Thermocouple serie_4', XYZ=-0.000,0.000,1.300, QUANTITY='THERMOCOUPLE' /
&DEVC ID='Thermocouple serie_5', XYZ=-0.000,0.000,1.600, QUANTITY='THERMOCOUPLE' /
...
}}}

=== `XYZ` set to `Center` ===

BlenderFDS calculates the global coordinates of the Blender `object` `center`. The resulting coordinates are exported as `XYZ` parameter of one only FDS namelist group.

The `object` `center` is the small dot that appears when the Blender `object` is selected in `object mode`. It is the `object` local reference system origin:

[http://lh4.ggpht.com/_iTIkwVoSUm0/S9XxUBWuJpI/AAAAAAAAARY/4lCVgLIjjH0/objpanel_DEVC.png]

== `PB*` parameter ==

|| *Blender `object` `PB*` set to* || *Exported as* || *Number of FDS namelist groups* ||
|| None || Nothing || None ||
|| Faces || Planes || Planes, one for each `face` of the Blender `object` ||

=== `PB*` set to `None` ===

No `PBX, PBY, PBZ` parameter is added to the exported namelist group.

=== `PB*` set to `Faces` ===

BlenderFDS calculates the bounding box in global coordinates of the Blender `object` `faces`. Each `face` is then flattened, and its edges straightened. The result is a group of right plane faces with edges parallel to the global axis. Each `face` is then replaced by a plane perpendicular to one global axis, as required by FDS. The resulting coordinates are exported as `PBX, PBY, PBZ` parameters of many FDS namelist group, one for each `face`.

Of course. it is much more clean and less prone to errors to model "straight" `faces`, acceptable by FDS as planes without transformation.

For example, this `PB*` setting can be used to input several `SLCFs` that share the same parameters:

[http://lh5.ggpht.com/_iTIkwVoSUm0/S9XxUzmgUbI/AAAAAAAAARk/jyQDwkkxAA4/objpanel_SLCF.png]

The user creates an `object` made of separate `faces` distributed inside the building, and obtains a series of `SLCFs`:

{{{
&SLCF QUANTITY='TEMPERATURE', VECTOR=.TRUE., PBX=0.000 /
&SLCF QUANTITY='TEMPERATURE', VECTOR=.TRUE., PBY=0.600 /
...
}}}

== Setting `XB, XYZ, PB*` at the same time ==

??? Why, limitations, errors